import type { NextPage } from "next";
import Head from "next/head";
import testInput from "../env/testInput"; // Relative path to your File
import React, { useState, useEffect } from "react";
console.log(testInput);

const originalMatrix: number[][] = testInput.split("\n").map((x) =>
  x
    .trim()
    .split("")
    .map((y) => y.trim())
    .map((z) => parseInt(z))
);
// console.log(octopiMatrix);
const increaseLocation = (matrix: number[][]) => {
  let increasedMatrix = matrix.map((item) => item.map((i) => i + 1));
  // for (let y = 0; y < increasedMatrix.length; y++) {
  //   const rowArray = increasedMatrix[y]!;
  //   for (let x = 0; x < rowArray.length; x++) {
  //     increasedMatrix[y]![x]++;
  //   }
  // }
  let maxVal = Math.max(...increasedMatrix.flat());
  console.log("increasebeforeflash", increasedMatrix.toString());

  while (maxVal > 9) {
    console.log("maxval", maxVal);
    for (let y = 0; y < increasedMatrix.length; y++) {
      const rowArray = increasedMatrix[y]!;
      for (let x = 0; x < rowArray.length; x++) {
        const val = rowArray[x]!;
        console.log("val", val);
        if (val > 9) {
          if (x !== rowArray.length - 1) {
            // RM
            increasedMatrix[y]![x + 1]++;
            // RB
            if (y !== increasedMatrix.length - 1) {
              increasedMatrix[y + 1]![x + 1]++;
            }
            // RT
            if (y !== 0) {
              increasedMatrix[y - 1]![x + 1]++;
            }
          }
          if (x !== 0) {
            // LM
            increasedMatrix[y]![x - 1]++;
            // LB
            if (y !== increasedMatrix.length - 1) {
              increasedMatrix[y + 1]![x - 1]++;
            }
            // LT
            if (y !== 0) {
              increasedMatrix[y - 1]![x - 1]++;
            }
          }
          // MB
          if (y !== increasedMatrix.length - 1) {
            increasedMatrix[y + 1]![x]++;
          }
          // MT
          if (y !== 0) {
            increasedMatrix[y - 1]![x]++;
          }
          increasedMatrix[y]![x] = -9999;
        }
      }
    }
    maxVal = Math.max(...increasedMatrix.flat());
  }
  let flashCount = 0;
  for (let y = 0; y < increasedMatrix.length; y++) {
    for (let x = 0; x < increasedMatrix[y]!.length; x++) {
      console.log(increasedMatrix![y]![x]);

      if (increasedMatrix![y]![x]! < 0) {
        increasedMatrix![y]![x] = 0;
        flashCount++;
      }
    }
  }
  console.log(increasedMatrix);

  return [increasedMatrix, flashCount];
};

const Home: NextPage = () => {
  const [octoMatrix, setOctoMatrix] = useState(originalMatrix);
  const [iteration, setIteration] = useState(0);
  const [flashCount, setFlashCount] = useState(0);
  const resetState = () => {
    console.log("is handleReset being triggered", originalMatrix, octoMatrix);
    setOctoMatrix(originalMatrix);
    setIteration(0);
    setFlashCount(0);
  };
  const handleIterate = () => {
    const increaseResult = increaseLocation(octoMatrix);
    setIteration(iteration + 1);
    setFlashCount(flashCount + (increaseResult[1] as number));
    setOctoMatrix([...(increaseResult[0] as number[][])]);
    console.log("this shouldnt get called when i click reset");
  };
  const handleReset = () => {
    resetState();
  };
  const iterate = () => handleIterate();
  // setInterval(iterate, 1000);
  // setTimeout(iterate, 1000);
  // useEffect(() => {
  //   const timer = setTimeout(iterate, 2000);

  //   return () => {
  //     clearTimeout(timer);
  //   };
  // }, []);
  return (
    <>
      <Head>
        <title>Dumbo Octopus</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          <span className="text-purple-300">Dumbo</span> Octopus
        </h1>
        <p className="text-2xl text-gray-700">
          Iteration {iteration}, Flash count {flashCount}
        </p>
        <div>
          <OctupusGrid matrix={octoMatrix} />
        </div>
        <Button onClick={handleReset} text={"reset"} />
        <Button onClick={iterate} text={"iterate"} />
      </main>
    </>
  );
};

type ButtonProps = {
  onClick: any;
  text: string;
};

const Button = ({ onClick, text }: ButtonProps) => (
  <button className="border-2 rounded-lg px-5 py-2 m-3" onClick={onClick}>
    {text}
  </button>
);

export default Home;

type OctopusProps = {
  energyLevel: number;
};

const Octopus = ({ energyLevel }: OctopusProps) => {
  return (
    <li className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-3 lg:w-2/3">
      {energyLevel}
    </li>
  );
};

type OctopusGridProps = {
  matrix: number[][];
};
const transposeMatrix = (matrix: any[][]) =>
  matrix![0]!.map((_, columnIndex) =>
    matrix.map((_, rowIndex) => matrix[rowIndex]![columnIndex])
  );

const OctupusGrid = ({ matrix }: OctopusGridProps) => {
  const matrix2 = transposeMatrix(matrix);
  return (
    <div className="flex flex-row">
      {matrix2.map((numArray, yindex) => {
        return (
          <ol key={[yindex, numArray, Date].toString()}>
            {numArray.map((num, xindex) => {
              return (
                <li
                  className="border-gray-500 border w-10 h-10 pt-1.5 text-center"
                  key={[xindex, yindex, num].toString()}
                >
                  {num}
                </li>
              );
            })}
          </ol>
        );
      })}
    </div>
  );
};
