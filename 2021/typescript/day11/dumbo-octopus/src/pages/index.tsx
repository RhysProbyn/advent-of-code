import type { NextPage } from "next";
import Head from "next/head";
import testInput from "../env/testInput"; // Relative path to your File
import React, { useState, useEffect } from "react";
// import { time } from "console";
// console.log(testInput);

const parseInputMatrix = (testInput: string): number[][] =>
  testInput.split("\n").map((x) =>
    x
      .trim()
      .split("")
      .map((y) => y.trim())
      .map((z) => parseInt(z))
  );
// console.log(octopiMatrix);
const increaseLocation = (matrix: number[][]) => {
  let increasedMatrix = matrix.map((item) => item.map((i) => i + 1));
  // for (let y = 0; y < increasedMatrix.length; y++) {
  //   const rowArray = increasedMatrix[y]!;
  //   for (let x = 0; x < rowArray.length; x++) {
  //     increasedMatrix[y]![x]++;
  //   }
  // }
  let maxVal = Math.max(...increasedMatrix.flat());
  // console.log("increasebeforeflash", increasedMatrix.toString());

  while (maxVal > 9) {
    // console.log("maxval", maxVal);
    for (let y = 0; y < increasedMatrix.length; y++) {
      const rowArray = increasedMatrix[y]!;
      for (let x = 0; x < rowArray.length; x++) {
        const val = rowArray[x]!;
        // console.log("val", val);
        if (val > 9) {
          if (x !== rowArray.length - 1) {
            // RM
            increasedMatrix[y]![x + 1]++;
            // RB
            if (y !== increasedMatrix.length - 1) {
              increasedMatrix[y + 1]![x + 1]++;
            }
            // RT
            if (y !== 0) {
              increasedMatrix[y - 1]![x + 1]++;
            }
          }
          if (x !== 0) {
            // LM
            increasedMatrix[y]![x - 1]++;
            // LB
            if (y !== increasedMatrix.length - 1) {
              increasedMatrix[y + 1]![x - 1]++;
            }
            // LT
            if (y !== 0) {
              increasedMatrix[y - 1]![x - 1]++;
            }
          }
          // MB
          if (y !== increasedMatrix.length - 1) {
            increasedMatrix[y + 1]![x]++;
          }
          // MT
          if (y !== 0) {
            increasedMatrix[y - 1]![x]++;
          }
          increasedMatrix[y]![x] = -9999;
        }
      }
    }

    maxVal = Math.max(...increasedMatrix.flat());
  }
  // let flashCount = 0;
  // for (let y = 0; y < increasedMatrix.length; y++) {
  //   for (let x = 0; x < increasedMatrix[y]!.length; x++) {
  //     console.log(increasedMatrix![y]![x]);

  //     if (increasedMatrix![y]![x]! < 0) {
  //       increasedMatrix![y]![x] = 0;
  //       flashCount++;
  //     }
  //   }
  // }

  increasedMatrix = increasedMatrix.map((item) =>
    item.map((i) => (i < 0 ? 0 : i))
  );

  const flashCount = increasedMatrix.reduce(
    (accum, item) => accum + item.filter((i) => i === 0).length,
    0
  );
  // console.log(increasedMatrix);

  return [increasedMatrix, flashCount];
};

const Home: NextPage = () => {
  const [inputMatrixString, setInputString] = useState(
    `5483143223
2745854711
5264556173
6141336146
6357385478
4167524645
2176841721
6882881134
4846848554
5283751526`
  );
  const [octoMatrix, setOctoMatrix] = useState(
    parseInputMatrix(inputMatrixString)
  );
  const [iteration, setIteration] = useState(0);
  const [flashCount, setFlashCount] = useState(0);
  const [numberOfIterations, setNumberOfIterations] = useState(100);
  const [iterating, setIterating] = useState(false);
  const resetState = () => {
    setOctoMatrix(parseInputMatrix(inputMatrixString));
    setIteration(0);
    setFlashCount(0);
  };
  const handleIterate = () => {
    if (iterating && iteration < numberOfIterations) {
      const increaseResult = increaseLocation(octoMatrix);
      setIteration(iteration + 1);
      setFlashCount(flashCount + (increaseResult[1] as number));
      setOctoMatrix([...(increaseResult[0] as number[][])]);
    }
  };
  const handleReset = () => {
    resetState();
  };
  const handleAutoIterate = () => {
    setIterating(!iterating);
  };
  const handleInputChange = (e: any) => {
    const { name, value } = e.target;
    setNumberOfIterations(value);
  };
  const handleTextChange = (e: any) => {
    const { name, value } = e.target;
    setInputString(value);
  };
  // console.log(inputValue);
  const iterate = () => handleIterate();
  // setInterval(iterate, 1000);
  setTimeout(iterate, 150);

  return (
    <>
      <Head>
        <title>Dumbo Octopus</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4 ">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-200">
          <span className="text-purple-300">Dumbo</span> Octopus
        </h1>
        <div>
          <OctupusGrid matrix={octoMatrix} />
        </div>
        <p className="text-2xl text-gray-200">
          Iteration {iteration} : Flash count {flashCount}
        </p>
        <div className="p-7 text-sm h-full flex flex-col text-center">
          <div className="flex justify-between text">
            <Button
              onClick={handleAutoIterate}
              text={iterating ? "stop" : "iterate"}
            />
            <IntegerInput
              text={"text"}
              currentNumber={numberOfIterations}
              handleInputChange={handleInputChange}
            />
            <Button onClick={handleReset} text={"reset"} />
          </div>
          number of iterations
        </div>
        Puzzle Input:
        <InputText
          currentText={inputMatrixString}
          handleTextChange={handleTextChange}
        />
        <a href="https://adventofcode.com/2021/day/11">
          Based on Advent of Code 2021 Day 11 challenge
        </a>
      </main>
    </>
  );
};

type ButtonProps = {
  onClick: any;
  text: string;
};

const Button = ({ onClick, text }: ButtonProps) => (
  <button
    className="border-2 rounded-lg px-5 py-2 m-3 inline-block"
    onClick={onClick}
  >
    {text}
  </button>
);

type IntegerInputProps = {
  text: string;
  currentNumber: number;
  handleInputChange: any;
};

const IntegerInput = ({
  text,
  currentNumber,
  handleInputChange,
}: IntegerInputProps) => (
  <input
    name="iterationNumber"
    type="number"
    value={currentNumber}
    onChange={handleInputChange}
    className="border-2 rounded-lg px-5 py-2 m-3 inline-block text-black text-center w-24"
  />
);
type InputBoxProps = {
  currentText: string;
  handleTextChange: any;
};

const InputText = ({ currentText, handleTextChange }: InputBoxProps) => (
  <textarea
    name="inputText"
    // type="text"
    value={currentText}
    onChange={handleTextChange}
    className="border-2 rounded-lg px-5 py-2 m-3 inline-block h-72 w-44 text-center bg-slate-800 text-gray-400"
  />
);

export default Home;

type OctopusProps = {
  energyLevel: number;
};

const Octopus = ({ energyLevel }: OctopusProps) => {
  return (
    <li
      className={`border-gray-500 ${
        energyLevel > 8 || energyLevel === 0 ? "text-gray-900" : "text-gray-100"
      }  border w-10 h-10 pt-1.5 text-center bg-color-range-${energyLevel} `}
    >
      {energyLevel}
    </li>
  );
};

type OctopusGridProps = {
  matrix: number[][];
};
const transposeMatrix = (matrix: any[][]) =>
  matrix![0]!.map((_, columnIndex) =>
    matrix.map((_, rowIndex) => matrix[rowIndex]![columnIndex])
  );

const OctupusGrid = ({ matrix }: OctopusGridProps) => {
  const matrix2 = transposeMatrix(matrix);
  return (
    <div className="flex flex-row ">
      {matrix2.map((numArray, yindex) => {
        return (
          <ol key={[yindex, numArray, Date].toString()}>
            {numArray.map((num, xindex) => {
              return (
                <Octopus energyLevel={num} key={[xindex, yindex].toString()} />
                // <li
                //   className={`border-gray-500 text-gray-900  border w-10 h-10 pt-1.5 text-center bg-color-range-${num} transition-colors duration-1000`}
                //   key={[xindex, yindex].toString()}
                // >
                //   {num}
                // </li>
              );
            })}
          </ol>
        );
      })}
    </div>
  );
};
