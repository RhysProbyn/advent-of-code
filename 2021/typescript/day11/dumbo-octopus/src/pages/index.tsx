import type { NextPage } from "next";
import Head from "next/head";
import text from "../env/testInput"; // Relative path to your File
import React, { useState } from "react";
console.log(text);

const file: string = text;
const octopiMatrix: number[][] = file.split("\n").map((x) =>
  x
    .trim()
    .split("")
    .map((y) => y.trim())
    .map((z) => parseInt(z))
);
console.log(octopiMatrix);
const increaseLocation = (matrix: number[][]) => {
  let increasedMatrix = matrix;
  for (let y = 0; y < increasedMatrix.length; y++) {
    const rowArray = increasedMatrix[y]!;
    for (let x = 0; x < rowArray.length; x++) {
      increasedMatrix[y]![x]++;
    }
  }
  let maxVal = Math.max(...increasedMatrix.flat());
  console.log("increasebeforeflash", increasedMatrix.toString());

  while (maxVal > 9) {
    console.log("maxval", maxVal);
    for (let y = 0; y < increasedMatrix.length; y++) {
      const rowArray = increasedMatrix[y]!;
      for (let x = 0; x < rowArray.length; x++) {
        const val = rowArray[x]!;
        console.log("val", val);
        if (val > 9) {
          // RM
          if (x !== rowArray.length - 1) {
            increasedMatrix[y]![x + 1]++;
          }
          // RB
          if (x !== rowArray.length - 1 && y !== increasedMatrix.length - 1) {
            increasedMatrix[y + 1]![x + 1]++;
          }
          // MB
          if (y !== increasedMatrix.length - 1) {
            increasedMatrix[y + 1]![x]++;
          }
          // LB
          if (y !== increasedMatrix.length - 1 && x !== 0) {
            increasedMatrix[y + 1]![x - 1]++;
          }
          // LM
          if (x !== 0) {
            increasedMatrix[y]![x - 1]++;
          }
          // LT
          if (x !== 0 && y !== 0) {
            increasedMatrix[y - 1]![x - 1]++;
          }
          // MT
          if (y !== 0) {
            increasedMatrix[y - 1]![x]++;
          }
          // RT
          if (x !== rowArray.length - 1 && y !== 0) {
            increasedMatrix[y - 1]![x + 1]++;
          }
          increasedMatrix[y]![x] = -9999;
        }
      }
    }
    maxVal = Math.max(...increasedMatrix.flat());
  }
  let flashCount = 0;
  for (let y = 0; y < increasedMatrix.length; y++) {
    for (let x = 0; x < increasedMatrix[y]!.length; x++) {
      console.log(increasedMatrix![y]![x]);

      if (increasedMatrix![y]![x]! < 0) {
        increasedMatrix![y]![x] = 0;
        flashCount++;
      }
    }
  }
  console.log(increasedMatrix);

  return [increasedMatrix as number[][], flashCount as number];
};

const Home: NextPage = () => {
  let initMatrix = new Array();
  initMatrix = [...octopiMatrix];
  console.log("initMatrix", initMatrix);
  const matrixOrig = [...octopiMatrix];

  const [octoMatrix, setOctoMatrix] = useState(initMatrix);
  const [iteration, setIteration] = useState(0);
  const [flashCount, setFlashCount] = useState(0);
  // init()
  const resetState = () => {
    setOctoMatrix([...octopiMatrix]);
  };
  const handleIterate = () => {
    const increaseResult = increaseLocation(octoMatrix);
    setIteration(iteration + 1);
    setFlashCount(flashCount + (increaseResult[1] as number));
    setOctoMatrix([...(increaseResult[0] as number[][])]);
  };
  const handleReset = () => {
    let resetMatrix = new Array();
    console.log("initMatrix", initMatrix);
    console.log("octopiMatrix", [...octopiMatrix]);

    resetMatrix = [...matrixOrig];
    console.log("resetMatrix", resetMatrix);

    resetState();
  };
  // setTimeout(handleIterate, 500);
  return (
    <>
      <Head>
        <title>Dumbo Octopus</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="container mx-auto flex flex-col items-center justify-center min-h-screen p-4">
        <h1 className="text-5xl md:text-[5rem] leading-normal font-extrabold text-gray-700">
          <span className="text-purple-300">Dumbo</span> Octopus
        </h1>
        <p className="text-2xl text-gray-700">
          Iteration {iteration}, Flash count {flashCount}
        </p>
        <Button onClick={handleIterate} text={"iterate"} />
        <div>
          <OctupusGrid matrix={octoMatrix} />
        </div>
        <Button onClick={handleReset} text={"reset"} />
        <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-3 lg:w-2/3">
          <TechnologyCard
            name="NextJS"
            description="The React framework for production"
            documentation="https://nextjs.org/"
          />
          <TechnologyCard
            name="TypeScript"
            description="Strongly typed programming language that builds on JavaScript, giving you better tooling at any scale"
            documentation="https://www.typescriptlang.org/"
          />
          <TechnologyCard
            name="TailwindCSS"
            description="Rapidly build modern websites without ever leaving your HTML"
            documentation="https://tailwindcss.com/"
          />
          <TechnologyCard
            name="tRPC"
            description="End-to-end typesafe APIs made easy"
            documentation="https://trpc.io/"
          />
          <TechnologyCard
            name="Next-Auth"
            description="Authentication for Next.js"
            documentation="https://next-auth.js.org/"
          />
          <TechnologyCard
            name="Prisma"
            description="Build data-driven JavaScript & TypeScript apps in less time"
            documentation="https://www.prisma.io/docs/"
          />
        </div>
      </main>
    </>
  );
};

type ButtonProps = {
  onClick: any;
  text: string;
};

const Button = ({ onClick, text }: ButtonProps) => (
  <button className="border-2 rounded-lg px-5 py-2 m-3" onClick={onClick}>
    {text}
  </button>
);

export default Home;

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center p-6 duration-500 border-2 border-gray-500 shadow-xl motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="mt-3 text-sm underline text-violet-500 decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};

type OctopusProps = {
  energyLevel: number;
};

const Octopus = ({ energyLevel }: OctopusProps) => {
  return (
    <div className="grid gap-3 pt-3 mt-3 text-center md:grid-cols-3 lg:w-2/3">
      {energyLevel}
    </div>
  );
};

type OctopusGridProps = {
  matrix: number[][];
};
const transposeMatrix = (matrix: any[][]) =>
  matrix![0]!.map((_, columnIndex) =>
    matrix.map((_, rowIndex) => matrix[rowIndex]![columnIndex])
  );

const OctupusGrid = ({ matrix }: OctopusGridProps) => {
  const matrix2 = transposeMatrix(matrix);
  return (
    <div className="flex flex-row">
      {matrix2.map((numArray, yindex) => {
        return (
          <ol key={[yindex, numArray, Date].toString()}>
            {numArray.map((num, xindex) => {
              return (
                <li
                  className="border-gray-500 border w-10 h-10 pt-1.5 text-center"
                  key={[xindex, yindex, num].toString()}
                >
                  {num}
                </li>
              );
            })}
          </ol>
        );
      })}
    </div>
  );
};
